(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-54f05aab"],{1078:function(e,t,n){"use strict";n.r(t);var l=n("7a23");const a=e=>(Object(l["pushScopeId"])("data-v-80549c70"),e=e(),Object(l["popScopeId"])(),e),c={class:"typescript-view"},r={class:"content"},s=a(()=>Object(l["createElementVNode"])("h3",null,"JavaScript 与 TypeScript 的区别",-1)),u=a(()=>Object(l["createElementVNode"])("div",{class:"wrapper"}," TypeScript 是 JavaScript 的超集，扩展了 JavaScript 的语法，因此现有的 JavaScript 代码可与 TypeScript 一起工作无需任何修改，TypeScript 通过类型注解提供编译时的静态类型检查。 TypeScript 可处理已有的 JavaScript 代码，并只对其中的 TypeScript 代码进行编译。 ",-1)),p=a(()=>Object(l["createElementVNode"])("h3",null,"要求数据类型是数值",-1)),o={class:"wrapper"},i=a(()=>Object(l["createElementVNode"])("span",null,"+  50  =  ",-1)),b=a(()=>Object(l["createElementVNode"])("h3",null,"要求数据类型是字符串",-1)),y={class:"wrapper"},m=a(()=>Object(l["createElementVNode"])("span",null,"20  ",-1)),d=a(()=>Object(l["createElementVNode"])("h3",null,"数据类型是any",-1)),V={class:"wrapper"},j=a(()=>Object(l["createElementVNode"])("span",null,"20  ",-1)),O={class:"wrapper"},g=a(()=>Object(l["createElementVNode"])("span",null,"20  ",-1)),v=a(()=>Object(l["createElementVNode"])("h3",null,"接口：interface",-1)),I={class:"wrapper"},N=a(()=>Object(l["createElementVNode"])("span",null,"姓名：  ",-1)),S=a(()=>Object(l["createElementVNode"])("span",null,"性别：  ",-1)),E=a(()=>Object(l["createElementVNode"])("h3",null,"联合类型&类型断言",-1)),h={class:"wrapper"},A=a(()=>Object(l["createElementVNode"])("div",null,[Object(l["createElementVNode"])("p",null,[Object(l["createElementVNode"])("strong",null,"使用类型断言有两种方式：＜类型＞值 或者 值 as 类型")])],-1)),T=a(()=>Object(l["createElementVNode"])("span",null,'"huabei bu".length',-1)),x=a(()=>Object(l["createElementVNode"])("span",null,"  =  ",-1)),w={class:"wrapper"},f=a(()=>Object(l["createElementVNode"])("span",null,"12345467890.toString().length",-1)),L=a(()=>Object(l["createElementVNode"])("span",null,"  =  ",-1)),D=a(()=>Object(l["createElementVNode"])("h3",null,"Typescript类的修饰符",-1)),F=a(()=>Object(l["createElementVNode"])("div",{class:"wrapper"},[Object(l["createElementVNode"])("p",null,[Object(l["createElementVNode"])("strong",null,"public :公有 在当前类里面、 子类 、类外面都可以访问")]),Object(l["createElementVNode"])("p",null,[Object(l["createElementVNode"])("strong",null," protected：保护类型 在当前类里面、子类里面可以访问，在类外部没法访问 ")]),Object(l["createElementVNode"])("p",null,[Object(l["createElementVNode"])("strong",null," private ：私有 在当前类里面可以访问，子类、类外部都没法访问 ")]),Object(l["createElementVNode"])("p",null,[Object(l["createElementVNode"])("strong",null,"属性如果不加修饰符 默认就是 公有 （public）")]),Object(l["createElementVNode"])("p",null,[Object(l["createElementVNode"])("strong",null,"readonly: 只读")])],-1));function J(e,t,n,a,J,H){const k=Object(l["resolveComponent"])("v-md-preview");return Object(l["openBlock"])(),Object(l["createElementBlock"])("div",c,[Object(l["createElementVNode"])("div",r,[s,u,p,Object(l["createElementVNode"])("div",o,[Object(l["createElementVNode"])("span",null,Object(l["toDisplayString"])(e.valueState.typeIsNumber.typeValue)+"  ",1),i,Object(l["createElementVNode"])("span",null,Object(l["toDisplayString"])(e.valueState.typeIsNumber.resultValue),1)]),Object(l["createVNode"])(k,{text:e.textHightLight.typeIsNumber},null,8,["text"]),b,Object(l["createElementVNode"])("div",y,[m,Object(l["createElementVNode"])("span",null,"+  "+Object(l["toDisplayString"])(e.valueState.typeIsString.typeValue)+"  =  ",1),Object(l["createElementVNode"])("span",null,Object(l["toDisplayString"])(e.valueState.typeIsString.resultValue),1)]),Object(l["createVNode"])(k,{text:e.textHightLight.typeIsString},null,8,["text"]),d,Object(l["createElementVNode"])("div",V,[j,Object(l["createElementVNode"])("span",null,"+  "+Object(l["toDisplayString"])(e.valueState.typeIsAny.typeValue1)+"  =  ",1),Object(l["createElementVNode"])("span",null,Object(l["toDisplayString"])(e.valueState.typeIsAny.resultValue1),1)]),Object(l["createElementVNode"])("div",O,[g,Object(l["createElementVNode"])("span",null,"+  "+Object(l["toDisplayString"])(e.valueState.typeIsAny.typeValue2)+"  =  ",1),Object(l["createElementVNode"])("span",null,Object(l["toDisplayString"])(e.valueState.typeIsAny.resultValue2),1)]),Object(l["createVNode"])(k,{text:e.textHightLight.typeIsAny},null,8,["text"]),v,Object(l["createElementVNode"])("div",I,[N,Object(l["createElementVNode"])("span",null,Object(l["toDisplayString"])(e.valueState.typeIsInterFace.name)+"  ",1),S,Object(l["createElementVNode"])("span",null,Object(l["toDisplayString"])(e.valueState.typeIsInterFace.sex),1)]),Object(l["createVNode"])(k,{text:e.textHightLight.typeIsInterFace},null,8,["text"]),E,Object(l["createElementVNode"])("div",h,[A,T,x,Object(l["createElementVNode"])("span",null,Object(l["toDisplayString"])(e.valueState.typeIsAs.stringValueLength),1)]),Object(l["createElementVNode"])("div",w,[f,L,Object(l["createElementVNode"])("span",null,Object(l["toDisplayString"])(e.valueState.typeIsAs.numberValueLength),1)]),Object(l["createVNode"])(k,{text:e.textHightLight.typeIsAs},null,8,["text"]),D,F])])}var H=Object(l["defineComponent"])({components:{},setup(){let e=Object(l["reactive"])({valueState:{typeIsNumber:{typeValue:100,resultValue:0},typeIsString:{typeValue:"21",resultValue:""},typeIsAny:{typeValue1:"undefined",typeValue2:"null",resultValue1:"",resultValue2:""},typeIsInterFace:{name:"",sex:""},typeIsAs:{numberValueLength:0,stringValueLength:0}}});const t=t=>{e.valueState.typeIsNumber.resultValue=50+t},n=t=>{e.valueState.typeIsString.resultValue="20"+t},a=t=>{void 0===t?e.valueState.typeIsAny.resultValue1=20+t:e.valueState.typeIsAny.resultValue2=20+t},c=t=>{e.valueState.typeIsInterFace={...t}},r=t=>{t.length?e.valueState.typeIsAs.stringValueLength=t.length:e.valueState.typeIsAs.numberValueLength=t.toString().length};return Object(l["onMounted"])(()=>{let l,s;l="huabei bu",s=1234567890,t(e.valueState.typeIsNumber.typeValue),n(e.valueState.typeIsString.typeValue),a(void 0),a(null),c({name:l,sex:"男"}),r(l),r(s)}),{...Object(l["toRefs"])(e),computerTypeIsNumber:t,computerTypeIsString:n,computerTypeIsAny:a,computerTypeIsAs:r,textHightLight:{typeIsNumber:"```js\n          const computerTypeIsNumber = (value : number) => { \n              state.valueState.typeIsNumber.resultValue = 50 + value; \n          };\n          computerTypeIsString(100) \n        ",typeIsString:"```js\n          const computerTypeIsString = (value: string) => {\n             state.valueState.typeIsString.resultValue = '20' + value; \n          };\n          computerTypeIsString('21')  \n        ",typeIsAny:"```js\n          const computerTypeIsAny = (value: any) => {\n             state.valueState.typeIsAny.resultValue = '20' + value; \n          };\n          computerTypeIsAny(undefined); // NaN \n          computerTypeIsAny(null); // 20 \n        ",typeIsInterFace:"```java \n          interface myMsgInterFace { \n            name: string; \n            sex: string; \n          } \n          const computerTypeIsInterFace = (value: myMsgInterFace) => { \n            state.valueState.typeIsInterFace = { ...value }; \n          }; \n          computerTypeIsInterFace({ name: 'huabei bu', sex: '男' }); \n        ",typeIsAs:"```js \n          const computerTypeIsAs = (value: string | number) => { \n            if ((value as string).length) { \n              state.valueState.typeIsAs.stringValueLength = (value as string).length; \n            } else { \n              state.valueState.typeIsAs.numberValueLength = value.toString().length; \n            } \n          }; \n          ```注意事项：类型断言并不是普通意义上的类型转换，断言成一个联合类型中不存在的类型是不允许的：``` \n          function toBoolean(something: string | number): boolean { \n              return <boolean>something; \n          }\n          // Type 'string | number' cannot be converted to type 'boolean' \n        "}}}}),k=(n("564a"),n("6b0d")),B=n.n(k);const M=B()(H,[["render",J],["__scopeId","data-v-80549c70"]]);t["default"]=M},"564a":function(e,t,n){"use strict";n("793a")},"793a":function(e,t,n){}}]);
//# sourceMappingURL=chunk-54f05aab.b1626d9e.js.map