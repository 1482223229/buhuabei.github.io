{"version":3,"sources":["webpack:///./src/views/mybackgarden/backgarden/interviewquestions/index.vue?38ae","webpack:///./src/views/mybackgarden/backgarden/interviewquestions/index.vue","webpack:///./src/views/mybackgarden/backgarden/interviewquestions/index.vue?6335"],"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_createVNode","_component_v_md_preview","text","_hoisted_15","_hoisted_24","script","__exports__","render"],"mappings":"kHAAA,W,yJCCOA,MAAM,kB,suEAkEJA,MAAM,W,QACTC,gCAAe,UAAX,UAAM,I,GACLD,MAAM,W,uoFApEfE,gCAsLM,MAtLNC,EAsLM,CArLJC,EAiEAH,gCA2EM,MA3ENI,EA2EM,CA1EJC,EACAL,gCAwEM,MAxENM,EAwEM,CAvEJC,EAaAC,yBAQgBC,EAAA,CAPdC,KAAK,+SAQPC,EAkBAH,yBA8BgBC,EAAA,CA7BdC,KAAK,6mBAgCXE,I,mCC9IJ,MAAMC,EAAS,GAKTC,EAA2B,IAAgBD,EAAQ,CAAC,CAAC,SAASE,GAAQ,CAAC,YAAY,qBAE1E,gB","file":"js/chunk-6f655fee.3ee75243.js","sourcesContent":["export * from \"-!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--11-oneOf-1-0!../../../../../node_modules/css-loader/dist/cjs.js??ref--11-oneOf-1-1!../../../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../../../node_modules/postcss-loader/src/index.js??ref--11-oneOf-1-2!../../../../../node_modules/less-loader/dist/cjs.js??ref--11-oneOf-1-3!../../../../../node_modules/style-resources-loader/lib/index.js??ref--11-oneOf-1-4!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./index.vue?vue&type=style&index=0&id=322a9b1c&lang=less&scoped=true\"","<template>\n  <div class=\"page-container\">\n    <div class=\"content\">\n      <h3>HTTP/HTTPS协议</h3>\n      <div class=\"wrapper\">\n        <p class=\"level2-title\">1.HTTP</p>\n        <div class=\"wrapper-content\">\n          超文本传输协议，是一个基于请求与响应，无状态的，应用层的协议，常基于TCP/IP协议传输数据，互联网上应用最为广泛的一种网络协议,所有的WWW文件都必须遵守这个标准。设计HTTP的初衷是为了提供一种发布和接收HTML页面的方法。\n        </div>\n        <p class=\"level2-title\">1.1.HTTP特点</p>\n        <div class=\"wrapper-content\">\n          <ul>\n            <li>1.无状态：协议对客户端没有状态存储，对事物处理没有“记忆”能力，比如访问一个网站需要反复进行登录操作</li>\n            <li>\n              2.无连接：HTTP/1.1之前，由于无状态特点，每次请求需要通过TCP三次握手四次挥手，和服务器重新建立连接。比如某个客户机在短时间多次请求同一个资源，服务器并不能区别是否已经响应过用户的请求，所以每次需要重新响应请求，需要耗费不必要的时间和流量。\n            </li>\n            <li>3.基于请求和响应：基本的特性，由客户端发起请求，服务端响应 简单快速、灵活</li>\n            <li>4.通信使用明文、请求和响应不会对通信方进行确认、无法保护数据的完整性</li>\n          </ul>\n        </div>\n        <p class=\"level2-title\">2.HTTPS</p>\n        <div class=\"wrapper-content\">\n          <ul>\n            <li>HTTPS是身披SSL外壳的HTTP。</li>\n            <li>\n              HTTPS是一种通过计算机网络进行安全通信的传输协议，经由HTTP进行通信，利用SSL/TLS建立全信道，加密数据包。HTTPS使用的主要目的是提供对网站服务器的身份认证，同时保护交换数据的隐私与完整性。\n            </li>\n          </ul>\n        </div>\n        <p class=\"level2-title\">2.2.HTTPS特点</p>\n        <div class=\"wrapper-content\">\n          <ul>\n            <li>1.内容加密：采用混合加密技术，中间者无法直接查看明文内容</li>\n            <li>2.验证身份：通过证书认证客户端访问的是自己的服务器</li>\n            <li>3.保护数据完整性：防止传输的内容被中间人冒充或者篡改</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n    <div class=\"content\">\n      <h3>vue和react相同点、不同点</h3>\n      <div class=\"wrapper\">\n        <p class=\"level2-title\">一、相同点</p>\n        <div class=\"wrapper-content\">\n          <ul>\n            <li>利用虚拟DOM实现快速渲染</li>\n            <li>轻量级</li>\n            <li>响应式组件</li>\n            <li>服务器端渲染</li>\n            <li>易于集成路由工具，打包工具以及状态管理工具</li>\n            <li>优秀的支持和社区</li>\n            <li>一切都是组件，组件实例之间可以通信并嵌套，并且都使用了Virtual Dom的思想。</li>\n          </ul>\n        </div>\n        <p class=\"level2-title\">二、不同点</p>\n        <div class=\"wrapper-content\">\n          <ul>\n            <li>\n              vue本质是MVVM框架，是由MVC发展而来的（双向数据流），React本质是前端组件化框架，是由后端组件化发展而来的（单向数据流）\n            </li>\n            <li>\n              vue是一个更小更灵活，适合开发单页面程序的简单化组件。 React是一个适合数据经常变化及构建大型项目的复杂组件\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n    <div class=\"content\">\n      <h3>js设计模式</h3>\n      <div class=\"wrapper\">\n        <p class=\"level2-title\">1.单例模式</p>\n        <p class=\"level2-title\">2.策略模式</p>\n        <div class=\"wrapper-content\">定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。</div>\n        <p class=\"level2-title\">3.代理模式</p>\n        <p class=\"level2-title\">4.迭代模式</p>\n        <div class=\"wrapper-content\">\n          迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。\n        </div>\n        <p class=\"level2-title\">5.发布—订阅模式</p>\n        <div class=\"wrapper-content\">\n          也称作观察者模式，定义了对象间的一种一对多的依赖关系，当一个对象的状态发\n          生改变时，所有依赖于它的对象都将得到通知\n        </div>\n        <v-md-preview\n          text=\"```js\n          // 订阅\n          document.body.addEventListener('click', function() { console.log('click1'); }, false);\n          document.body.addEventListener('click', function() { console.log('click2'); }, false);\n          // 发布\n          document.body.click(); // click1 click2\n          \"\n        ></v-md-preview>\n        <p class=\"level2-title\">6.命令模式</p>\n        <p class=\"level2-title\">7.组合模式</p>\n        <div class=\"wrapper-content\">\n          是用小的子对象来构建更大的 对象，而这些小的子对象本身也许是由更小 的“孙对象”构成的。\n        </div>\n        <p class=\"level2-title\">8.装饰者模式</p>\n        <div class=\"wrapper-content\">\n          以动态地给某个对象添加一些额外的职责，而不会影响从这个类中派生的其他对象。\n          是一种“即用即付”的方式，能够在不改变对 象自身的基础上，在程序运行期间给对象动态地 添加职责\n        </div>\n        <p class=\"level2-title\">9.状态模式</p>\n        <div class=\"wrapper-content\">\n          事物内部状态的改变往往会带来事物的行为改变。在处理的时候，将这个处理委托给当前的状态对象即可，该状态对象会负责渲染它自身的行为\n        </div>\n        <p class=\"level2-title\">10.外观模式</p>\n        <div class=\"wrapper-content\">\n          为子系统中的一组接口提供一个一致的界面，定义一个高层接口，这个接口使子系统更加容易使用\n        </div>\n        <v-md-preview\n          text=\"```js\n          // 三个处理函数\n          function start() {\n              console.log('start');\n          }\n\n          function doing() {\n              console.log('doing');\n          }\n\n          function end() {\n              console.log('end');\n          }\n\n          // 外观函数，将一些处理统一起来，方便调用\n          function execute() {\n              start();\n              doing();\n              end();\n          }\n\n          // 调用init开始执行\n          function init() {\n              // 此处直接调用了高层函数，也可以选择越过它直接调用相关的函数\n              execute();\n          }\n\n          init(); // start doing end\n          \"\n        ></v-md-preview>\n      </div>\n    </div>\n    <div class=\"content\">\n      <h3>在浏览器输入url敲击回车后发生了什么</h3>\n      <div class=\"wrapper\">\n        <p class=\"level2-title\">概述</p>\n        在浏览器输入URL回车之后，主要发生以下六个行为：\n\n        <div>1、URL解析</div>\n        <div>2、域名解析</div>\n        <div>3、tcp连接</div>\n        <div>4、http请求</div>\n        <div>5、响应请求</div>\n        <div>6、页面渲染</div>\n\n        <a>详细链接：https://www.jianshu.com/p/a0dbffd9bd43</a>\n      </div>\n    </div>\n    <div class=\"content\">\n      <h3>vue常用的属性及API的了解</h3>\n      <div class=\"wrapper\">答案...</div>\n    </div>\n    <div class=\"content\">\n      <h3>vue数据双向绑定</h3>\n      <div class=\"wrapper\">答案...</div>\n    </div>\n    <div class=\"content\">\n      <h3>react hooks的了解</h3>\n      <div class=\"wrapper\">答案...</div>\n    </div>\n    <div class=\"content\">\n      <h3>（vue/react）组件传值</h3>\n      <div class=\"wrapper\">答案...</div>\n    </div>\n    <div class=\"content\">\n      <h3>es6的了解</h3>\n      <div class=\"wrapper\">答案...</div>\n    </div>\n    <div class=\"content\">\n      <h3>原型/原型链</h3>\n      <div class=\"wrapper\">答案...</div>\n    </div>\n  </div>\n</template>\n\n<script setup></script>\n\n<style lang=\"less\" scoped>\n.page-container {\n  width: 100%;\n  padding: 30px;\n  .content {\n    .wrapper {\n      padding: 10px 10px 10px 40px;\n      .level2-title {\n        font-weight: bolder;\n        letter-spacing: 2px;\n      }\n      .wrapper-content {\n        text-indent: 2em;\n      }\n    }\n  }\n}\n</style>\n","import { render } from \"./index.vue?vue&type=template&id=322a9b1c&scoped=true\"\nconst script = {}\n\nimport \"./index.vue?vue&type=style&index=0&id=322a9b1c&lang=less&scoped=true\"\n\nimport exportComponent from \"/home/runner/work/io/io/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-322a9b1c\"]])\n\nexport default __exports__"],"sourceRoot":""}